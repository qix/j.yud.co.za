---
import astroLogo from "../assets/astro.svg";
import background from "../assets/background.svg";
import { invariant } from "../jslib/invariant";

import {Vestaboard} from "../jslib/Vestaboard"
import ansi from 'ansi-html';
import { attemptWrap, wrap } from "../jslib/wrap";

let sentHtml = "";
let message = "";
let error = '';
let useCodes = false;

if (Astro.request.method === "POST") {

	const webhookUrl = import.meta.env.VESTABOARD_POST_WEBHOOK_URL;
	invariant(webhookUrl, 'Expected VESTABOARD_POST_WEBHOOK_URL to be defined');

	try {
		const data = await Astro.request.formData();
		const msg = data.get("message");

		useCodes = data.get('useCodes') ? true : false;

		if (msg) {

			message = msg.toString();

			const vb = new Vestaboard();

			const {result, complete} = attemptWrap(
				useCodes ? msg.toString() : msg.toString().toLowerCase(),
				Vestaboard.width, Vestaboard.height, {
				horizontalCenter: true,
				verticalCenter: true,
			})

			if (!complete) {
				error = 'Message is too long to fit on the Vestaboard';
			}else {
			try {
				vb.write(0,0, result);
				sentHtml = vb.htmlString();

				const response = await fetch(webhookUrl, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						display: vb.current,
						message: msg.toString(),
					}),
				});
				if (!response.ok) {
					throw new Error('Failed to send message to Vestaboard');
				}

			} catch (err) {
				invariant(err instanceof Error, 'Expected an error to be an instance of Error');
				error = err.toString();
			}
		}
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}

export const prerender = false;
---

<div id="container">
	<img id="background" src={background.src} alt="" fetchpriority="high" />
	<main>
		<section id="hero">

				{ sentHtml ? (
					<section id="form">
						<h1>ðŸŽ‰ Your message has been clowncopterized! ðŸŽ‰</h1>
						<pre id="preview" set:html={sentHtml}></pre>
					</section>
				) : (
				<h1>Send a message</h1>
					<>{ error ? (
						<div class="box">
							<p>{error}</p>
						</div>
					) : null}</>
				<form id="form" method="POST">
					<textarea name="message">{message}</textarea>
					<label>
						<input type="checkbox" name="useCodes" value="useCodes" checked={useCodes} /> Use codes
						<span class="tip">(<strong>W</strong>hite, <strong>R</strong>ed, <strong>O</strong>range, <strong>Y</strong>ellow, <strong>G</strong>reen,
						<strong>B</strong>lue, <strong>V</strong>iolet, b<strong>L</strong>ack)</span>
					</label><br/>
					<button>Clowncopterize</button>
				</form>
			)}
		</section>
	</main>
</div>

<style>
	#background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		filter: blur(100px);
	}

	#container {
		font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova",
			"Nimbus Sans", Arial, sans-serif;
		height: 100%;
	}

	main {
		height: 100%;
		display: flex;
		justify-content: center;
		flex-direction: row;
	}

	#hero {
		display: flex;
		align-items: start;
		flex-direction: column;
		justify-content: center;
		padding: 16px;
	}

	h1 {
		font-size: 28px;
		margin-top: 0.25em;
		color: #24272c;
	}

	h2 {
		margin: 0 0 1em;
		font-weight: normal;
		color: #24272c;
		font-size: 24px;
	}

	#preview {
		align: center;
		display: inline-block;
		border: 1px solid #000;
		padding: 5px;
		font-family: ui-monospace, "Cascadia Code", "Source Code Pro", Menlo,
			Consolas, "DejaVu Sans Mono", monospace;
		font-weight: normal;
		background: linear-gradient(14deg, #ecb2b2 0%, #f3b9f8 100%);
		margin: 0;
	}

	#preview span {
		background-color: #3245ff;
		display: block;
		border: 1px solid #AAA;
	}

	#form {
		display: block;
		flex-direction: column;
		gap: 16px;
		width: 520px;
	}

	#form textarea {
		padding: 16px;
		font-size: 16px;
		border-radius: 10px;
		border: 1px solid #e5e7eb;
		width: 100%;
		height: 5em;
		margin: 1em 0;
	}

	#form .tip {
		color: #6a6c70;
	}

	#form button {
		display: inline;
		align-items: center;
		padding: 10px 12px;
		color: #111827;
		text-decoration: none;
		transition: color 0.2s;
	}

	#form button:hover {
		color: rgb(78, 80, 86);
	}

	#form button {
		color: white;
		background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
		box-shadow:
			inset 0 0 0 1px rgba(255, 255, 255, 0.12),
			inset 0 -2px 0 rgba(0, 0, 0, 0.24);
		font-size: 20px;
		border-radius: 10px;
		border: none;
		margin: 1em 0;
	}

	#form button:hover {
		color: rgb(230, 230, 230);
		box-shadow: none;
	}
	
	#form label {
		margin: 1em 0;
	}

	p {
		color: #4b5563;
		font-size: 16px;
		line-height: 24px;
		letter-spacing: -0.006em;
		margin: 0;
	}

	code {
		display: inline-block;
		background:
			linear-gradient(66.77deg, #f3cddd 0%, #f5cee7 100%) padding-box,
			linear-gradient(155deg, #d83333 0%, #f041ff 18%, #f5cee7 45%)
				border-box;
		border-radius: 8px;
		border: 1px solid transparent;
		padding: 6px 8px;
	}

	.box {
		padding: 16px;
		background: rgba(255, 255, 255, 1);
		border-radius: 16px;
		border: 1px solid white;
	}


	@media screen and (max-width: 640px) {
		#container {
			display: flex;
			flex-direction: column;
		}

		#hero {
			display: block;
			padding-top: 10%;
		}

		#form {
			width: 320px;
		}

		#form .tip {
			display: block;
		}

		#form a.button {
			padding: 14px 18px;
		}

		h1 {
			line-height: 1.5;
		}
	}
</style>
